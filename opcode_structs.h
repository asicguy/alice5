#ifndef OPCODE_STRUCTS_H
#define OPCODE_STRUCTS_H

// Automatically generated by generate_ops.py. DO NOT EDIT.

#include "interpreter.h"

// OpNop instruction (code 0).
struct InsnNop : public Instruction {
    InsnNop(const LineInfo& lineInfo) : Instruction(lineInfo) {
    }
    virtual void step(Interpreter *interpreter) { interpreter->stepNop(*this); }
    virtual uint32_t opcode() const { return SpvOpNop; }
    virtual std::string name() const { return "OpNop"; }
};

// OpFunctionParameter instruction (code 55).
struct InsnFunctionParameter : public Instruction {
    InsnFunctionParameter(const LineInfo& lineInfo, uint32_t type, uint32_t resultId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    virtual void step(Interpreter *interpreter) { interpreter->stepFunctionParameter(*this); }
    virtual uint32_t opcode() const { return SpvOpFunctionParameter; }
    virtual std::string name() const { return "OpFunctionParameter"; }
    virtual void emit(Compiler *compiler);
};

// OpFunctionCall instruction (code 57).
struct InsnFunctionCall : public Instruction {
    InsnFunctionCall(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t functionId, std::vector<uint32_t> operandId) : Instruction(lineInfo), type(type), functionId(functionId) {
        addResult(resultId);
        for (auto _argId : operandId) {
            addParameter(_argId);
        }
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t functionId; // operand from register
    uint32_t operandId(size_t i) const { return argIdList[0 + i]; } // operand from register
    size_t operandIdCount() const { return argIdList.size() - 0; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFunctionCall(*this); }
    virtual uint32_t opcode() const { return SpvOpFunctionCall; }
    virtual std::string name() const { return "OpFunctionCall"; }
    virtual void emit(Compiler *compiler);
};

// OpLoad instruction (code 61).
struct InsnLoad : public Instruction {
    InsnLoad(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t pointerId, uint32_t memoryAccess) : Instruction(lineInfo), type(type), memoryAccess(memoryAccess) {
        addResult(resultId);
        addParameter(pointerId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t pointerId() const { return argIdList[0]; } // operand from register
    uint32_t memoryAccess; // MemoryAccess (optional)
    virtual void step(Interpreter *interpreter) { interpreter->stepLoad(*this); }
    virtual uint32_t opcode() const { return SpvOpLoad; }
    virtual std::string name() const { return "OpLoad"; }
    virtual void emit(Compiler *compiler);
};

// OpStore instruction (code 62).
struct InsnStore : public Instruction {
    InsnStore(const LineInfo& lineInfo, uint32_t pointerId, uint32_t objectId, uint32_t memoryAccess) : Instruction(lineInfo), memoryAccess(memoryAccess) {
        addParameter(pointerId);
        addParameter(objectId);
    }
    uint32_t pointerId() const { return argIdList[0]; } // operand from register
    uint32_t objectId() const { return argIdList[1]; } // operand from register
    uint32_t memoryAccess; // MemoryAccess (optional)
    virtual void step(Interpreter *interpreter) { interpreter->stepStore(*this); }
    virtual uint32_t opcode() const { return SpvOpStore; }
    virtual std::string name() const { return "OpStore"; }
    virtual void emit(Compiler *compiler);
};

// OpAccessChain instruction (code 65).
struct InsnAccessChain : public Instruction {
    InsnAccessChain(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t baseId, std::vector<uint32_t> indexesId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(baseId);
        for (auto _argId : indexesId) {
            addParameter(_argId);
        }
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t baseId() const { return argIdList[0]; } // operand from register
    uint32_t indexesId(size_t i) const { return argIdList[1 + i]; } // operand from register
    size_t indexesIdCount() const { return argIdList.size() - 1; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepAccessChain(*this); }
    virtual uint32_t opcode() const { return SpvOpAccessChain; }
    virtual std::string name() const { return "OpAccessChain"; }
    virtual void emit(Compiler *compiler);
};

// OpVectorShuffle instruction (code 79).
struct InsnVectorShuffle : public Instruction {
    InsnVectorShuffle(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t vector1Id, uint32_t vector2Id, std::vector<uint32_t> componentsId) : Instruction(lineInfo), type(type), componentsId(componentsId) {
        addResult(resultId);
        addParameter(vector1Id);
        addParameter(vector2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t vector1Id() const { return argIdList[0]; } // operand from register
    uint32_t vector2Id() const { return argIdList[1]; } // operand from register
    std::vector<uint32_t> componentsId; // LiteralInteger
    virtual void step(Interpreter *interpreter) { interpreter->stepVectorShuffle(*this); }
    virtual uint32_t opcode() const { return SpvOpVectorShuffle; }
    virtual std::string name() const { return "OpVectorShuffle"; }
};

// OpCompositeConstruct instruction (code 80).
struct InsnCompositeConstruct : public Instruction {
    InsnCompositeConstruct(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, std::vector<uint32_t> constituentsId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        for (auto _argId : constituentsId) {
            addParameter(_argId);
        }
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t constituentsId(size_t i) const { return argIdList[0 + i]; } // operand from register
    size_t constituentsIdCount() const { return argIdList.size() - 0; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepCompositeConstruct(*this); }
    virtual uint32_t opcode() const { return SpvOpCompositeConstruct; }
    virtual std::string name() const { return "OpCompositeConstruct"; }
};

// OpCompositeExtract instruction (code 81).
struct InsnCompositeExtract : public Instruction {
    InsnCompositeExtract(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t compositeId, std::vector<uint32_t> indexesId) : Instruction(lineInfo), type(type), indexesId(indexesId) {
        addResult(resultId);
        addParameter(compositeId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t compositeId() const { return argIdList[0]; } // operand from register
    std::vector<uint32_t> indexesId; // LiteralInteger
    virtual void step(Interpreter *interpreter) { interpreter->stepCompositeExtract(*this); }
    virtual uint32_t opcode() const { return SpvOpCompositeExtract; }
    virtual std::string name() const { return "OpCompositeExtract"; }
};

// OpCompositeInsert instruction (code 82).
struct InsnCompositeInsert : public Instruction {
    InsnCompositeInsert(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t objectId, uint32_t compositeId, std::vector<uint32_t> indexesId) : Instruction(lineInfo), type(type), indexesId(indexesId) {
        addResult(resultId);
        addParameter(objectId);
        addParameter(compositeId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t objectId() const { return argIdList[0]; } // operand from register
    uint32_t compositeId() const { return argIdList[1]; } // operand from register
    std::vector<uint32_t> indexesId; // LiteralInteger
    virtual void step(Interpreter *interpreter) { interpreter->stepCompositeInsert(*this); }
    virtual uint32_t opcode() const { return SpvOpCompositeInsert; }
    virtual std::string name() const { return "OpCompositeInsert"; }
};

// OpCopyObject instruction (code 83).
struct InsnCopyObject : public Instruction {
    InsnCopyObject(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operandId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operandId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operandId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepCopyObject(*this); }
    virtual uint32_t opcode() const { return SpvOpCopyObject; }
    virtual std::string name() const { return "OpCopyObject"; }
    virtual void emit(Compiler *compiler);
};

// OpImageSampleImplicitLod instruction (code 87).
struct InsnImageSampleImplicitLod : public Instruction {
    InsnImageSampleImplicitLod(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t sampledImageId, uint32_t coordinateId, uint32_t imageOperands) : Instruction(lineInfo), type(type), imageOperands(imageOperands) {
        addResult(resultId);
        addParameter(sampledImageId);
        addParameter(coordinateId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t sampledImageId() const { return argIdList[0]; } // operand from register
    uint32_t coordinateId() const { return argIdList[1]; } // operand from register
    uint32_t imageOperands; // ImageOperands (optional)
    virtual void step(Interpreter *interpreter) { interpreter->stepImageSampleImplicitLod(*this); }
    virtual uint32_t opcode() const { return SpvOpImageSampleImplicitLod; }
    virtual std::string name() const { return "OpImageSampleImplicitLod"; }
};

// OpImageSampleExplicitLod instruction (code 88).
struct InsnImageSampleExplicitLod : public Instruction {
    InsnImageSampleExplicitLod(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t sampledImageId, uint32_t coordinateId, uint32_t imageOperands) : Instruction(lineInfo), type(type), imageOperands(imageOperands) {
        addResult(resultId);
        addParameter(sampledImageId);
        addParameter(coordinateId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t sampledImageId() const { return argIdList[0]; } // operand from register
    uint32_t coordinateId() const { return argIdList[1]; } // operand from register
    uint32_t imageOperands; // ImageOperands
    virtual void step(Interpreter *interpreter) { interpreter->stepImageSampleExplicitLod(*this); }
    virtual uint32_t opcode() const { return SpvOpImageSampleExplicitLod; }
    virtual std::string name() const { return "OpImageSampleExplicitLod"; }
};

// OpConvertFToS instruction (code 110).
struct InsnConvertFToS : public Instruction {
    InsnConvertFToS(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t floatValueId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(floatValueId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t floatValueId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepConvertFToS(*this); }
    virtual uint32_t opcode() const { return SpvOpConvertFToS; }
    virtual std::string name() const { return "OpConvertFToS"; }
    virtual void emit(Compiler *compiler);
};

// OpConvertSToF instruction (code 111).
struct InsnConvertSToF : public Instruction {
    InsnConvertSToF(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t signedValueId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(signedValueId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t signedValueId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepConvertSToF(*this); }
    virtual uint32_t opcode() const { return SpvOpConvertSToF; }
    virtual std::string name() const { return "OpConvertSToF"; }
    virtual void emit(Compiler *compiler);
};

// OpFNegate instruction (code 127).
struct InsnFNegate : public Instruction {
    InsnFNegate(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operandId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operandId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operandId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFNegate(*this); }
    virtual uint32_t opcode() const { return SpvOpFNegate; }
    virtual std::string name() const { return "OpFNegate"; }
    virtual void emit(Compiler *compiler);
};

// OpIAdd instruction (code 128).
struct InsnIAdd : public Instruction {
    InsnIAdd(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepIAdd(*this); }
    virtual uint32_t opcode() const { return SpvOpIAdd; }
    virtual std::string name() const { return "OpIAdd"; }
    virtual void emit(Compiler *compiler);
};

// OpFAdd instruction (code 129).
struct InsnFAdd : public Instruction {
    InsnFAdd(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFAdd(*this); }
    virtual uint32_t opcode() const { return SpvOpFAdd; }
    virtual std::string name() const { return "OpFAdd"; }
    virtual void emit(Compiler *compiler);
};

// OpISub instruction (code 130).
struct InsnISub : public Instruction {
    InsnISub(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepISub(*this); }
    virtual uint32_t opcode() const { return SpvOpISub; }
    virtual std::string name() const { return "OpISub"; }
};

// OpFSub instruction (code 131).
struct InsnFSub : public Instruction {
    InsnFSub(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFSub(*this); }
    virtual uint32_t opcode() const { return SpvOpFSub; }
    virtual std::string name() const { return "OpFSub"; }
    virtual void emit(Compiler *compiler);
};

// OpFMul instruction (code 133).
struct InsnFMul : public Instruction {
    InsnFMul(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFMul(*this); }
    virtual uint32_t opcode() const { return SpvOpFMul; }
    virtual std::string name() const { return "OpFMul"; }
    virtual void emit(Compiler *compiler);
};

// OpSDiv instruction (code 135).
struct InsnSDiv : public Instruction {
    InsnSDiv(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepSDiv(*this); }
    virtual uint32_t opcode() const { return SpvOpSDiv; }
    virtual std::string name() const { return "OpSDiv"; }
};

// OpFDiv instruction (code 136).
struct InsnFDiv : public Instruction {
    InsnFDiv(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFDiv(*this); }
    virtual uint32_t opcode() const { return SpvOpFDiv; }
    virtual std::string name() const { return "OpFDiv"; }
    virtual void emit(Compiler *compiler);
};

// OpFMod instruction (code 141).
struct InsnFMod : public Instruction {
    InsnFMod(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFMod(*this); }
    virtual uint32_t opcode() const { return SpvOpFMod; }
    virtual std::string name() const { return "OpFMod"; }
    virtual void emit(Compiler *compiler);
};

// OpVectorTimesScalar instruction (code 142).
struct InsnVectorTimesScalar : public Instruction {
    InsnVectorTimesScalar(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t vectorId, uint32_t scalarId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(vectorId);
        addParameter(scalarId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t vectorId() const { return argIdList[0]; } // operand from register
    uint32_t scalarId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepVectorTimesScalar(*this); }
    virtual uint32_t opcode() const { return SpvOpVectorTimesScalar; }
    virtual std::string name() const { return "OpVectorTimesScalar"; }
};

// OpVectorTimesMatrix instruction (code 144).
struct InsnVectorTimesMatrix : public Instruction {
    InsnVectorTimesMatrix(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t vectorId, uint32_t matrixId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(vectorId);
        addParameter(matrixId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t vectorId() const { return argIdList[0]; } // operand from register
    uint32_t matrixId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepVectorTimesMatrix(*this); }
    virtual uint32_t opcode() const { return SpvOpVectorTimesMatrix; }
    virtual std::string name() const { return "OpVectorTimesMatrix"; }
};

// OpMatrixTimesVector instruction (code 145).
struct InsnMatrixTimesVector : public Instruction {
    InsnMatrixTimesVector(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t matrixId, uint32_t vectorId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(matrixId);
        addParameter(vectorId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t matrixId() const { return argIdList[0]; } // operand from register
    uint32_t vectorId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepMatrixTimesVector(*this); }
    virtual uint32_t opcode() const { return SpvOpMatrixTimesVector; }
    virtual std::string name() const { return "OpMatrixTimesVector"; }
};

// OpMatrixTimesMatrix instruction (code 146).
struct InsnMatrixTimesMatrix : public Instruction {
    InsnMatrixTimesMatrix(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t leftMatrixId, uint32_t rightMatrixId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(leftMatrixId);
        addParameter(rightMatrixId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t leftMatrixId() const { return argIdList[0]; } // operand from register
    uint32_t rightMatrixId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepMatrixTimesMatrix(*this); }
    virtual uint32_t opcode() const { return SpvOpMatrixTimesMatrix; }
    virtual std::string name() const { return "OpMatrixTimesMatrix"; }
};

// OpDot instruction (code 148).
struct InsnDot : public Instruction {
    InsnDot(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t vector1Id, uint32_t vector2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(vector1Id);
        addParameter(vector2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t vector1Id() const { return argIdList[0]; } // operand from register
    uint32_t vector2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepDot(*this); }
    virtual uint32_t opcode() const { return SpvOpDot; }
    virtual std::string name() const { return "OpDot"; }
};

// OpAny instruction (code 154).
struct InsnAny : public Instruction {
    InsnAny(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t vectorId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(vectorId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t vectorId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepAny(*this); }
    virtual uint32_t opcode() const { return SpvOpAny; }
    virtual std::string name() const { return "OpAny"; }
};

// OpAll instruction (code 155).
struct InsnAll : public Instruction {
    InsnAll(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t vectorId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(vectorId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t vectorId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepAll(*this); }
    virtual uint32_t opcode() const { return SpvOpAll; }
    virtual std::string name() const { return "OpAll"; }
};

// OpLogicalOr instruction (code 166).
struct InsnLogicalOr : public Instruction {
    InsnLogicalOr(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepLogicalOr(*this); }
    virtual uint32_t opcode() const { return SpvOpLogicalOr; }
    virtual std::string name() const { return "OpLogicalOr"; }
    virtual void emit(Compiler *compiler);
};

// OpLogicalAnd instruction (code 167).
struct InsnLogicalAnd : public Instruction {
    InsnLogicalAnd(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepLogicalAnd(*this); }
    virtual uint32_t opcode() const { return SpvOpLogicalAnd; }
    virtual std::string name() const { return "OpLogicalAnd"; }
    virtual void emit(Compiler *compiler);
};

// OpLogicalNot instruction (code 168).
struct InsnLogicalNot : public Instruction {
    InsnLogicalNot(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operandId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operandId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operandId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepLogicalNot(*this); }
    virtual uint32_t opcode() const { return SpvOpLogicalNot; }
    virtual std::string name() const { return "OpLogicalNot"; }
    virtual void emit(Compiler *compiler);
};

// OpSelect instruction (code 169).
struct InsnSelect : public Instruction {
    InsnSelect(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t conditionId, uint32_t object1Id, uint32_t object2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(conditionId);
        addParameter(object1Id);
        addParameter(object2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t conditionId() const { return argIdList[0]; } // operand from register
    uint32_t object1Id() const { return argIdList[1]; } // operand from register
    uint32_t object2Id() const { return argIdList[2]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepSelect(*this); }
    virtual uint32_t opcode() const { return SpvOpSelect; }
    virtual std::string name() const { return "OpSelect"; }
    virtual void emit(Compiler *compiler);
};

// OpIEqual instruction (code 170).
struct InsnIEqual : public Instruction {
    InsnIEqual(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepIEqual(*this); }
    virtual uint32_t opcode() const { return SpvOpIEqual; }
    virtual std::string name() const { return "OpIEqual"; }
    virtual void emit(Compiler *compiler);
};

// OpINotEqual instruction (code 171).
struct InsnINotEqual : public Instruction {
    InsnINotEqual(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepINotEqual(*this); }
    virtual uint32_t opcode() const { return SpvOpINotEqual; }
    virtual std::string name() const { return "OpINotEqual"; }
};

// OpSLessThan instruction (code 177).
struct InsnSLessThan : public Instruction {
    InsnSLessThan(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepSLessThan(*this); }
    virtual uint32_t opcode() const { return SpvOpSLessThan; }
    virtual std::string name() const { return "OpSLessThan"; }
    virtual void emit(Compiler *compiler);
};

// OpSLessThanEqual instruction (code 179).
struct InsnSLessThanEqual : public Instruction {
    InsnSLessThanEqual(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepSLessThanEqual(*this); }
    virtual uint32_t opcode() const { return SpvOpSLessThanEqual; }
    virtual std::string name() const { return "OpSLessThanEqual"; }
};

// OpFOrdEqual instruction (code 180).
struct InsnFOrdEqual : public Instruction {
    InsnFOrdEqual(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFOrdEqual(*this); }
    virtual uint32_t opcode() const { return SpvOpFOrdEqual; }
    virtual std::string name() const { return "OpFOrdEqual"; }
    virtual void emit(Compiler *compiler);
};

// OpFOrdLessThan instruction (code 184).
struct InsnFOrdLessThan : public Instruction {
    InsnFOrdLessThan(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFOrdLessThan(*this); }
    virtual uint32_t opcode() const { return SpvOpFOrdLessThan; }
    virtual std::string name() const { return "OpFOrdLessThan"; }
    virtual void emit(Compiler *compiler);
};

// OpFOrdGreaterThan instruction (code 186).
struct InsnFOrdGreaterThan : public Instruction {
    InsnFOrdGreaterThan(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFOrdGreaterThan(*this); }
    virtual uint32_t opcode() const { return SpvOpFOrdGreaterThan; }
    virtual std::string name() const { return "OpFOrdGreaterThan"; }
    virtual void emit(Compiler *compiler);
};

// OpFOrdLessThanEqual instruction (code 188).
struct InsnFOrdLessThanEqual : public Instruction {
    InsnFOrdLessThanEqual(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFOrdLessThanEqual(*this); }
    virtual uint32_t opcode() const { return SpvOpFOrdLessThanEqual; }
    virtual std::string name() const { return "OpFOrdLessThanEqual"; }
    virtual void emit(Compiler *compiler);
};

// OpFOrdGreaterThanEqual instruction (code 190).
struct InsnFOrdGreaterThanEqual : public Instruction {
    InsnFOrdGreaterThanEqual(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t operand1Id, uint32_t operand2Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(operand1Id);
        addParameter(operand2Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operand1Id() const { return argIdList[0]; } // operand from register
    uint32_t operand2Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepFOrdGreaterThanEqual(*this); }
    virtual uint32_t opcode() const { return SpvOpFOrdGreaterThanEqual; }
    virtual std::string name() const { return "OpFOrdGreaterThanEqual"; }
    virtual void emit(Compiler *compiler);
};

// OpPhi instruction (code 245).
struct InsnPhi : public Instruction {
    InsnPhi(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, std::vector<uint32_t> operandId, std::vector<uint32_t> labelId) : Instruction(lineInfo), type(type), labelId(labelId) {
        addResult(resultId);
        for (auto _argId : operandId) {
            addParameter(_argId);
        }
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t operandId(size_t i) const { return argIdList[0 + i]; } // source ref IDs
    size_t operandIdCount() const { return argIdList.size() - 0; } // source ref IDs
    std::vector<uint32_t> labelId; // source labels
    virtual void step(Interpreter *interpreter) { interpreter->stepPhi(*this); }
    virtual uint32_t opcode() const { return SpvOpPhi; }
    virtual std::string name() const { return "OpPhi"; }
    virtual void emit(Compiler *compiler);
};

// OpBranch instruction (code 249).
struct InsnBranch : public Instruction {
    InsnBranch(const LineInfo& lineInfo, uint32_t targetLabelId) : Instruction(lineInfo), targetLabelId(targetLabelId) {
        targetLabelIds.insert(targetLabelId);
    }
    uint32_t targetLabelId; // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepBranch(*this); }
    virtual uint32_t opcode() const { return SpvOpBranch; }
    virtual std::string name() const { return "OpBranch"; }
    virtual void emit(Compiler *compiler);
    virtual bool isBranch() const { return true; }
    virtual bool isTermination() const { return true; }
};

// OpBranchConditional instruction (code 250).
struct InsnBranchConditional : public Instruction {
    InsnBranchConditional(const LineInfo& lineInfo, uint32_t conditionId, uint32_t trueLabelId, uint32_t falseLabelId, std::vector<uint32_t> branchweightsId) : Instruction(lineInfo), trueLabelId(trueLabelId), falseLabelId(falseLabelId), branchweightsId(branchweightsId) {
        addParameter(conditionId);
        targetLabelIds.insert(trueLabelId);
        targetLabelIds.insert(falseLabelId);
    }
    uint32_t conditionId() const { return argIdList[0]; } // operand from register
    uint32_t trueLabelId; // operand from register
    uint32_t falseLabelId; // operand from register
    std::vector<uint32_t> branchweightsId; // LiteralInteger
    virtual void step(Interpreter *interpreter) { interpreter->stepBranchConditional(*this); }
    virtual uint32_t opcode() const { return SpvOpBranchConditional; }
    virtual std::string name() const { return "OpBranchConditional"; }
    virtual void emit(Compiler *compiler);
    virtual bool isBranch() const { return true; }
    virtual bool isTermination() const { return true; }
};

// OpKill instruction (code 252).
struct InsnKill : public Instruction {
    InsnKill(const LineInfo& lineInfo) : Instruction(lineInfo) {
    }
    virtual void step(Interpreter *interpreter) { interpreter->stepKill(*this); }
    virtual uint32_t opcode() const { return SpvOpKill; }
    virtual std::string name() const { return "OpKill"; }
    virtual bool isTermination() const { return true; }
};

// OpReturn instruction (code 253).
struct InsnReturn : public Instruction {
    InsnReturn(const LineInfo& lineInfo) : Instruction(lineInfo) {
    }
    virtual void step(Interpreter *interpreter) { interpreter->stepReturn(*this); }
    virtual uint32_t opcode() const { return SpvOpReturn; }
    virtual std::string name() const { return "OpReturn"; }
    virtual void emit(Compiler *compiler);
    virtual bool isBranch() const { return true; }
    virtual bool isTermination() const { return true; }
};

// OpReturnValue instruction (code 254).
struct InsnReturnValue : public Instruction {
    InsnReturnValue(const LineInfo& lineInfo, uint32_t valueId) : Instruction(lineInfo) {
        addParameter(valueId);
    }
    uint32_t valueId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepReturnValue(*this); }
    virtual uint32_t opcode() const { return SpvOpReturnValue; }
    virtual std::string name() const { return "OpReturnValue"; }
    virtual void emit(Compiler *compiler);
    virtual bool isBranch() const { return true; }
    virtual bool isTermination() const { return true; }
};

// GLSLstd450FAbs instruction (code 4).
struct InsnGLSLstd450FAbs : public Instruction {
    InsnGLSLstd450FAbs(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450FAbs(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450FAbs; }
    virtual std::string name() const { return "GLSLstd450FAbs"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450FSign instruction (code 6).
struct InsnGLSLstd450FSign : public Instruction {
    InsnGLSLstd450FSign(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450FSign(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450FSign; }
    virtual std::string name() const { return "GLSLstd450FSign"; }
};

// GLSLstd450Floor instruction (code 8).
struct InsnGLSLstd450Floor : public Instruction {
    InsnGLSLstd450Floor(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Floor(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Floor; }
    virtual std::string name() const { return "GLSLstd450Floor"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Fract instruction (code 10).
struct InsnGLSLstd450Fract : public Instruction {
    InsnGLSLstd450Fract(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Fract(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Fract; }
    virtual std::string name() const { return "GLSLstd450Fract"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Radians instruction (code 11).
struct InsnGLSLstd450Radians : public Instruction {
    InsnGLSLstd450Radians(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t degreesId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(degreesId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t degreesId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Radians(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Radians; }
    virtual std::string name() const { return "GLSLstd450Radians"; }
};

// GLSLstd450Sin instruction (code 13).
struct InsnGLSLstd450Sin : public Instruction {
    InsnGLSLstd450Sin(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Sin(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Sin; }
    virtual std::string name() const { return "GLSLstd450Sin"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Cos instruction (code 14).
struct InsnGLSLstd450Cos : public Instruction {
    InsnGLSLstd450Cos(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Cos(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Cos; }
    virtual std::string name() const { return "GLSLstd450Cos"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Atan instruction (code 18).
struct InsnGLSLstd450Atan : public Instruction {
    InsnGLSLstd450Atan(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t y_over_xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(y_over_xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t y_over_xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Atan(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Atan; }
    virtual std::string name() const { return "GLSLstd450Atan"; }
};

// GLSLstd450Atan2 instruction (code 25).
struct InsnGLSLstd450Atan2 : public Instruction {
    InsnGLSLstd450Atan2(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t yId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(yId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t yId() const { return argIdList[0]; } // operand from register
    uint32_t xId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Atan2(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Atan2; }
    virtual std::string name() const { return "GLSLstd450Atan2"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Pow instruction (code 26).
struct InsnGLSLstd450Pow : public Instruction {
    InsnGLSLstd450Pow(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId, uint32_t yId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
        addParameter(yId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    uint32_t yId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Pow(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Pow; }
    virtual std::string name() const { return "GLSLstd450Pow"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Exp instruction (code 27).
struct InsnGLSLstd450Exp : public Instruction {
    InsnGLSLstd450Exp(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Exp(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Exp; }
    virtual std::string name() const { return "GLSLstd450Exp"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Log instruction (code 28).
struct InsnGLSLstd450Log : public Instruction {
    InsnGLSLstd450Log(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Log(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Log; }
    virtual std::string name() const { return "GLSLstd450Log"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Exp2 instruction (code 29).
struct InsnGLSLstd450Exp2 : public Instruction {
    InsnGLSLstd450Exp2(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Exp2(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Exp2; }
    virtual std::string name() const { return "GLSLstd450Exp2"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Log2 instruction (code 30).
struct InsnGLSLstd450Log2 : public Instruction {
    InsnGLSLstd450Log2(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Log2(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Log2; }
    virtual std::string name() const { return "GLSLstd450Log2"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Sqrt instruction (code 31).
struct InsnGLSLstd450Sqrt : public Instruction {
    InsnGLSLstd450Sqrt(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Sqrt(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Sqrt; }
    virtual std::string name() const { return "GLSLstd450Sqrt"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450FMin instruction (code 37).
struct InsnGLSLstd450FMin : public Instruction {
    InsnGLSLstd450FMin(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId, uint32_t yId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
        addParameter(yId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    uint32_t yId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450FMin(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450FMin; }
    virtual std::string name() const { return "GLSLstd450FMin"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450FMax instruction (code 40).
struct InsnGLSLstd450FMax : public Instruction {
    InsnGLSLstd450FMax(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId, uint32_t yId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
        addParameter(yId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    uint32_t yId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450FMax(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450FMax; }
    virtual std::string name() const { return "GLSLstd450FMax"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450FClamp instruction (code 43).
struct InsnGLSLstd450FClamp : public Instruction {
    InsnGLSLstd450FClamp(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId, uint32_t minValId, uint32_t maxValId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
        addParameter(minValId);
        addParameter(maxValId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    uint32_t minValId() const { return argIdList[1]; } // operand from register
    uint32_t maxValId() const { return argIdList[2]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450FClamp(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450FClamp; }
    virtual std::string name() const { return "GLSLstd450FClamp"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450FMix instruction (code 46).
struct InsnGLSLstd450FMix : public Instruction {
    InsnGLSLstd450FMix(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId, uint32_t yId, uint32_t aId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
        addParameter(yId);
        addParameter(aId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    uint32_t yId() const { return argIdList[1]; } // operand from register
    uint32_t aId() const { return argIdList[2]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450FMix(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450FMix; }
    virtual std::string name() const { return "GLSLstd450FMix"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Step instruction (code 48).
struct InsnGLSLstd450Step : public Instruction {
    InsnGLSLstd450Step(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t edgeId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(edgeId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t edgeId() const { return argIdList[0]; } // operand from register
    uint32_t xId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Step(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Step; }
    virtual std::string name() const { return "GLSLstd450Step"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450SmoothStep instruction (code 49).
struct InsnGLSLstd450SmoothStep : public Instruction {
    InsnGLSLstd450SmoothStep(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t edge0Id, uint32_t edge1Id, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(edge0Id);
        addParameter(edge1Id);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t edge0Id() const { return argIdList[0]; } // operand from register
    uint32_t edge1Id() const { return argIdList[1]; } // operand from register
    uint32_t xId() const { return argIdList[2]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450SmoothStep(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450SmoothStep; }
    virtual std::string name() const { return "GLSLstd450SmoothStep"; }
    virtual void emit(Compiler *compiler);
};

// GLSLstd450Length instruction (code 66).
struct InsnGLSLstd450Length : public Instruction {
    InsnGLSLstd450Length(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Length(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Length; }
    virtual std::string name() const { return "GLSLstd450Length"; }
};

// GLSLstd450Distance instruction (code 67).
struct InsnGLSLstd450Distance : public Instruction {
    InsnGLSLstd450Distance(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t p0Id, uint32_t p1Id) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(p0Id);
        addParameter(p1Id);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t p0Id() const { return argIdList[0]; } // operand from register
    uint32_t p1Id() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Distance(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Distance; }
    virtual std::string name() const { return "GLSLstd450Distance"; }
};

// GLSLstd450Cross instruction (code 68).
struct InsnGLSLstd450Cross : public Instruction {
    InsnGLSLstd450Cross(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId, uint32_t yId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
        addParameter(yId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    uint32_t yId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Cross(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Cross; }
    virtual std::string name() const { return "GLSLstd450Cross"; }
};

// GLSLstd450Normalize instruction (code 69).
struct InsnGLSLstd450Normalize : public Instruction {
    InsnGLSLstd450Normalize(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t xId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(xId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t xId() const { return argIdList[0]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Normalize(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Normalize; }
    virtual std::string name() const { return "GLSLstd450Normalize"; }
};

// GLSLstd450Reflect instruction (code 71).
struct InsnGLSLstd450Reflect : public Instruction {
    InsnGLSLstd450Reflect(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t iId, uint32_t nId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(iId);
        addParameter(nId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t iId() const { return argIdList[0]; } // operand from register
    uint32_t nId() const { return argIdList[1]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Reflect(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Reflect; }
    virtual std::string name() const { return "GLSLstd450Reflect"; }
};

// GLSLstd450Refract instruction (code 72).
struct InsnGLSLstd450Refract : public Instruction {
    InsnGLSLstd450Refract(const LineInfo& lineInfo, uint32_t type, uint32_t resultId, uint32_t iId, uint32_t nId, uint32_t etaId) : Instruction(lineInfo), type(type) {
        addResult(resultId);
        addParameter(iId);
        addParameter(nId);
        addParameter(etaId);
    }
    uint32_t type; // result type
    uint32_t resultId() const { return resIdList[0]; } // SSA register for result value
    uint32_t iId() const { return argIdList[0]; } // operand from register
    uint32_t nId() const { return argIdList[1]; } // operand from register
    uint32_t etaId() const { return argIdList[2]; } // operand from register
    virtual void step(Interpreter *interpreter) { interpreter->stepGLSLstd450Refract(*this); }
    virtual uint32_t opcode() const { return 0x10000 | GLSLstd450Refract; }
    virtual std::string name() const { return "GLSLstd450Refract"; }
};


#endif // OPCODE_STRUCTS_H
